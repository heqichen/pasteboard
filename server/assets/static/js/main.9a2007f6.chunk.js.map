{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["client","rest","wrap","mime","DEBUGHOST","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","value","content","toString","setState","editorValue","onNewButtonCLick","window","location","href","onSaveButtonClick","entity","entityStr","JSON","stringify","console","log","method","path","title","headers","Content-Type","then","resp","parse","message","alert","uri","pathname","split","length","state","initialized","self","assertThisInitialized","response","id","RichTextEditor","createValueFromString","createEmptyValue","react_default","a","createElement","className","onClick","react_rte_default","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAMIA,SAASC,IAAKC,KAAKC,MACnBC,EAAY,GA2GDC,cAtGb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoCRQ,SAAW,SAACC,GACVR,EAAKS,QAAUD,EAAME,SAAS,QAC/BV,EAAKW,SAAS,CAACC,YAAaJ,KAvCVR,EAuDnBa,iBAAmB,WACjBC,OAAOC,SAASC,KAAK,KAxDJhB,EA2DnBiB,kBAAoB,WAClB,IAAIC,EAAS,CACXT,QAAST,EAAKS,SAEZU,EAAYC,KAAKC,UAAUH,GAC/BI,QAAQC,IAAI,iBAAkBL,GAC9BxB,IAAK,CACH8B,OAAU,OACVC,KAAQ5B,EAAU,SAASG,EAAK0B,MAChCR,OAAUC,EACVQ,QAAW,CACPC,eAAgB,sBAEnBC,KAAK,SAASC,GACDV,KAAKW,MAAMD,EAAKZ,QAClBc,QACVC,MAAM,MAENA,MAAM,aA3EV,IACIC,EADWpB,OAAOC,SAASoB,SACZC,MAAM,KAAK,GAC1BF,EAAIG,OAAS,GACfJ,MAAM,SAERjC,EAAK0B,MAAQQ,EACblC,EAAKS,QAAU,GACfT,EAAKsC,MAAQ,CACXC,aAAa,GAEf,IAAIC,EAAIvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAD,IAZS,OAcjBP,EAAO,CACLgC,KAAQ5B,EAAU,SAASG,EAAK0B,QAC/BG,KAAK,SAASa,GAGfpB,QAAQC,IAAI,aAAcmB,EAASxB,QAC/BwB,EAASxB,OAAOyB,IAClBH,EAAK/B,QAAUiC,EAASxB,OAAOT,QAC/B+B,EAAK7B,SAAS,CACZ4B,aAAa,EAEb3B,YAAagC,IAAeC,sBAAsBH,EAASxB,OAAOT,QAAS,YAG7E+B,EAAK/B,QAAU,GACf+B,EAAK7B,SAAS,CACZ4B,aAAa,EACb3B,YAAagC,IAAeE,wBA/BjB9C,wEAmFjB,OAAIG,KAAKmC,MAAMC,YACLQ,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASC,QAAShD,KAAKU,kBAAvC,OACAkC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASC,QAAShD,KAAKc,mBAAvC,QACA8B,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACAxC,MAAOL,KAAKmC,MAAM1B,YAClBL,SAAUJ,KAAKI,YAGTwC,EAAAC,EAAAC,cAAA,+BA9FII,aCEEC,QACW,cAA7BxC,OAAOC,SAASwC,UAEe,UAA7BzC,OAAOC,SAASwC,UAEhBzC,OAAOC,SAASwC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.9a2007f6.chunk.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport RichTextEditor from 'react-rte';\nimport rest from \"rest\";\nimport mime from \"rest/interceptor/mime\";\nimport \"./App.css\";\n\nvar client = rest.wrap(mime);\nvar DEBUGHOST = \"\";\n//var DEBUGHOST = \"http://localhost:3303\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    var pathname = window.location.pathname;\n    var uri = pathname.split(\"/\")[1];\n    if (uri.length < 1) {\n      alert(\"error\");\n    }\n    this.title = uri;\n    this.content = \"\";\n    this.state = {\n      initialized: false\n    }\n    var self = this;\n\n    client({\n      \"path\": DEBUGHOST+\"/rest/\"+this.title\n    }).then(function(response) {\n      //var entity = JSON.parse(response.entity);\n\n      console.log('response: ', response.entity);\n      if (response.entity.id) {\n        self.content = response.entity.content;\n        self.setState({\n          initialized: true,\n          //editorValue: RichTextEditor.createEmptyValue()\n          editorValue: RichTextEditor.createValueFromString(response.entity.content, \"html\")\n        });\n      } else {\n        self.content = \"\";\n        self.setState({\n          initialized: true,\n          editorValue: RichTextEditor.createEmptyValue()\n        });\n      }\n    });\n  }\n\n  onChange = (value) => {\n    this.content = value.toString(\"html\");\n  \tthis.setState({editorValue: value});\n  \t//this.setState({value: RichTextEditor.createValueFromString(\"<h1>haha</h1>\", 'html')})\n  \t\n  \t/*\n  \tconsole.log(value.toString(\"html\"));\n    this.setState({value});\n    if (this.props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      this.props.onChange(\n        value.toString('html')\n      );\n    }*/\n  };\n\n  onNewButtonCLick = () => {\n    window.location.href=\"/\";\n  };\n\n  onSaveButtonClick = () => {    \n    var entity = {\n      content: this.content\n    };\n    var entityStr = JSON.stringify(entity);\n    console.log(\"send content, \", entity);\n    rest({\n      \"method\": \"post\",\n      \"path\": DEBUGHOST+\"/rest/\"+this.title,\n      \"entity\": entityStr,\n      \"headers\": {\n          'Content-Type': 'application/json'\n      },\n    }).then(function(resp) {\n      var message = JSON.parse(resp.entity);\n      if (message.message) {\n        alert(\"OK\");\n      } else {\n        alert(\"failed\");\n      }\n    })\n  };\n\n  render () {\n    if (this.state.initialized) {\n      return (<div>\n        <span className=\"button\" onClick={this.onNewButtonCLick}>New</span>\n        <span className=\"button\" onClick={this.onSaveButtonClick}>Save</span>\n        <RichTextEditor\n        value={this.state.editorValue}\n        onChange={this.onChange}\n      /></div>);\n    } else {\n      return (<h1>Loading...</h1>);\n    }\n\n  };\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}